// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: beanstorm_schema.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum PControlType: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case pressure // = 0
  case flow // = 1
  case UNRECOGNIZED(Int)

  init() {
    self = .pressure
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .pressure
    case 1: self = .flow
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  var rawValue: Int {
    switch self {
    case .pressure: return 0
    case .flow: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension PControlType: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  static let allCases: [PControlType] = [
    .pressure,
    .flow,
  ]
}

#endif  // swift(>=4.2)

struct PControlPoint {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var time: Float = 0

  var value: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PBrewProfile {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var uuid: String = String()

  var temperature: Float = 0

  ///  repeated PControlPoint control_points = 4;
  var controlType: PControlType = .pressure

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct PPID {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var kp: Float = 0

  var ki: Float = 0

  var kd: Float = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension PControlType: @unchecked Sendable {}
extension PControlPoint: @unchecked Sendable {}
extension PBrewProfile: @unchecked Sendable {}
extension PPID: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PControlType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "pressure"),
    1: .same(proto: "flow"),
  ]
}

extension PControlPoint: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PControlPoint"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "time"),
    2: .same(proto: "value"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.time) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.time != 0 {
      try visitor.visitSingularFloatField(value: self.time, fieldNumber: 1)
    }
    if self.value != 0 {
      try visitor.visitSingularFloatField(value: self.value, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PControlPoint, rhs: PControlPoint) -> Bool {
    if lhs.time != rhs.time {return false}
    if lhs.value != rhs.value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PBrewProfile: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PBrewProfile"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "uuid"),
    2: .same(proto: "temperature"),
    3: .standard(proto: "control_type"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self.uuid) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.temperature) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self.controlType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.uuid.isEmpty {
      try visitor.visitSingularStringField(value: self.uuid, fieldNumber: 1)
    }
    if self.temperature != 0 {
      try visitor.visitSingularFloatField(value: self.temperature, fieldNumber: 2)
    }
    if self.controlType != .pressure {
      try visitor.visitSingularEnumField(value: self.controlType, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PBrewProfile, rhs: PBrewProfile) -> Bool {
    if lhs.uuid != rhs.uuid {return false}
    if lhs.temperature != rhs.temperature {return false}
    if lhs.controlType != rhs.controlType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PPID: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PPID"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "kp"),
    2: .same(proto: "ki"),
    3: .same(proto: "kd"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self.kp) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self.ki) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self.kd) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.kp != 0 {
      try visitor.visitSingularFloatField(value: self.kp, fieldNumber: 1)
    }
    if self.ki != 0 {
      try visitor.visitSingularFloatField(value: self.ki, fieldNumber: 2)
    }
    if self.kd != 0 {
      try visitor.visitSingularFloatField(value: self.kd, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PPID, rhs: PPID) -> Bool {
    if lhs.kp != rhs.kp {return false}
    if lhs.ki != rhs.ki {return false}
    if lhs.kd != rhs.kd {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
