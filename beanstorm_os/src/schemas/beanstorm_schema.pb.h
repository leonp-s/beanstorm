/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.8 */

#ifndef PB_BEANSTORM_SCHEMA_PB_H_INCLUDED
#define PB_BEANSTORM_SCHEMA_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _PControlType {
    PControlType_pressure = 0,
    PControlType_flow = 1
} PControlType;

/* Struct definitions */
typedef struct _PControlPoint {
    float time;
    float value;
} PControlPoint;

typedef struct _PBrewProfile {
    pb_callback_t uuid;
    float temperature;
    PControlType control_type; /* repeated PControlPoint control_points = 4; */
} PBrewProfile;

typedef struct _PPID {
    float kp;
    float ki;
    float kd;
} PPID;


#ifdef __cplusplus
extern "C" {
#endif

/* Helper constants for enums */
#define _PControlType_MIN PControlType_pressure
#define _PControlType_MAX PControlType_flow
#define _PControlType_ARRAYSIZE ((PControlType)(PControlType_flow+1))


#define PBrewProfile_control_type_ENUMTYPE PControlType



/* Initializer values for message structs */
#define PControlPoint_init_default               {0, 0}
#define PBrewProfile_init_default                {{{NULL}, NULL}, 0, _PControlType_MIN}
#define PPID_init_default                        {0, 0, 0}
#define PControlPoint_init_zero                  {0, 0}
#define PBrewProfile_init_zero                   {{{NULL}, NULL}, 0, _PControlType_MIN}
#define PPID_init_zero                           {0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define PControlPoint_time_tag                   1
#define PControlPoint_value_tag                  2
#define PBrewProfile_uuid_tag                    1
#define PBrewProfile_temperature_tag             2
#define PBrewProfile_control_type_tag            3
#define PPID_kp_tag                              1
#define PPID_ki_tag                              2
#define PPID_kd_tag                              3

/* Struct field encoding specification for nanopb */
#define PControlPoint_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    time,              1) \
X(a, STATIC,   SINGULAR, FLOAT,    value,             2)
#define PControlPoint_CALLBACK NULL
#define PControlPoint_DEFAULT NULL

#define PBrewProfile_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   uuid,              1) \
X(a, STATIC,   SINGULAR, FLOAT,    temperature,       2) \
X(a, STATIC,   SINGULAR, UENUM,    control_type,      3)
#define PBrewProfile_CALLBACK pb_default_field_callback
#define PBrewProfile_DEFAULT NULL

#define PPID_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, FLOAT,    kp,                1) \
X(a, STATIC,   SINGULAR, FLOAT,    ki,                2) \
X(a, STATIC,   SINGULAR, FLOAT,    kd,                3)
#define PPID_CALLBACK NULL
#define PPID_DEFAULT NULL

extern const pb_msgdesc_t PControlPoint_msg;
extern const pb_msgdesc_t PBrewProfile_msg;
extern const pb_msgdesc_t PPID_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define PControlPoint_fields &PControlPoint_msg
#define PBrewProfile_fields &PBrewProfile_msg
#define PPID_fields &PPID_msg

/* Maximum encoded size of messages (where known) */
/* PBrewProfile_size depends on runtime parameters */
#define BEANSTORM_SCHEMA_PB_H_MAX_SIZE           PPID_size
#define PControlPoint_size                       10
#define PPID_size                                15

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
